/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICalculateGeoDistanceEndpointClient {
    /**
     * Calculates the distance
     */
    handle(request: CalculateGeoDistanceRequest): Observable<CalculateGeoDistanceResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class CalculateGeoDistanceEndpointClient implements ICalculateGeoDistanceEndpointClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Calculates the distance
     */
    handle(request: CalculateGeoDistanceRequest): Observable<CalculateGeoDistanceResponse> {
        let url_ = this.baseUrl + "/geo-distance/calculate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(<any>response_);
                } catch (e) {
                    return <Observable<CalculateGeoDistanceResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CalculateGeoDistanceResponse>><any>_observableThrow(response_);
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<CalculateGeoDistanceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CalculateGeoDistanceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CalculateGeoDistanceResponse>(<any>null);
    }
}

export class CalculateGeoDistanceResponse implements ICalculateGeoDistanceResponse {
    value!: number;
    unit!: DistanceUnit;
    method!: GeoDistanceCalculationMethod;

    constructor(data?: ICalculateGeoDistanceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.method = _data["method"];
        }
    }

    static fromJS(data: any): CalculateGeoDistanceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CalculateGeoDistanceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["method"] = this.method;
        return data;
    }
}

export interface ICalculateGeoDistanceResponse {
    value: number;
    unit: DistanceUnit;
    method: GeoDistanceCalculationMethod;
}

export enum DistanceUnit {
    Kilometer = "Kilometer",
    Mile = "Mile",
}

export enum GeoDistanceCalculationMethod {
    GeoCurve = "GeoCurve",
    Pythagoras = "Pythagoras",
    ThreeDimensionPoint = "ThreeDimensionPoint",
}

export class CalculateGeoDistanceRequest implements ICalculateGeoDistanceRequest {
    initialLatitude!: number;
    initialLongitude!: number;
    targetLatitude!: number;
    targetLongitude!: number;
    unit!: DistanceUnit;
    method!: GeoDistanceCalculationMethod;

    constructor(data?: ICalculateGeoDistanceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.initialLatitude = _data["initialLatitude"];
            this.initialLongitude = _data["initialLongitude"];
            this.targetLatitude = _data["targetLatitude"];
            this.targetLongitude = _data["targetLongitude"];
            this.unit = _data["unit"];
            this.method = _data["method"];
        }
    }

    static fromJS(data: any): CalculateGeoDistanceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CalculateGeoDistanceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["initialLatitude"] = this.initialLatitude;
        data["initialLongitude"] = this.initialLongitude;
        data["targetLatitude"] = this.targetLatitude;
        data["targetLongitude"] = this.targetLongitude;
        data["unit"] = this.unit;
        data["method"] = this.method;
        return data;
    }
}

export interface ICalculateGeoDistanceRequest {
    initialLatitude: number;
    initialLongitude: number;
    targetLatitude: number;
    targetLongitude: number;
    unit: DistanceUnit;
    method: GeoDistanceCalculationMethod;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}